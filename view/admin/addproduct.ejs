<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/stylesheet/admin/addproduct.css">
    <script src="https://kit.fontawesome.com/197a2eac2f.js" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/2.8.0/cropper.min.css">

    <style>
    
    #imagePreview img {
            height: 60px;
            max-width: 90px;
            margin: 5px;
        }
    /* Style for the modal */
    #imagePreview img {
            height: 60px;
            max-width: 90px;
            margin: 5px;
        }

        #cropper110Modal {
            position: absolute;
            width: 68vw;
            height: 79vh;
            background-color: rgba(53, 52, 52, 0.532);
            display: flex;
            justify-content: center;
            align-items: center;
            display: none;
            margin-top: -427px;
        }

        #cropper110Modal img {
            max-width: 100%;
        }

        .cropper110-page {
            margin: 1em auto;
            max-width:  646px;
            height: 100%;
        }

        .cropper110-box {
            padding: 0.5em;
            width: calc(100% / 2 - 1em);
            max-height: 56vh;
        }

        .cropper110-crop,
        .cropper110-close {
            padding: .5rem 1rem;
            background-color: rgb(0, 0, 0);
            color: #fff;
            font-weight: bold;
        }

        .cropper110-close {
            background-color: red;
        }
       
    </style>
</head>
<body>
  <div class="navbar">
    <nav class="main-nav">
        <div>
            <h1>Versatile</h1>
        </div>
        <ul class="menu">
            <li><a href="/Insite">Dashboard</a></li>
            <li><a href="/adminLogin">Logout</a></li>
        </ul>
    </nav>
</div>

 <!-- form -->
 <div class="form-container">
 <div class="background-container">

    <a href="/products" class="custom-link"><i class="fa-solid fa-arrow-left"></i></a>
<h1 class="heading">Add Product</h1>


<form id='form' action="/AddProduct/:<%=product._id%>" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">

  <!-- Product Name -->

  <label for="productName">Product Name:</label>

  <input type="text" id="productName" name="productName"><br>
  <span id="product_error" style="color: red; margin-top: 5px;"></span>
  <!-- Product Description -->
  <br>
  <label for="productDescription">Product Description:</label>
  <textarea id="productDescription" name="productDescription" rows="2" ></textarea><br>
  <span id="productDescription_error" style="color: red; margin-top: 5px;"></span>
  <!-- Product Category -->
<!-- Product Category --><br>
<label for="productCategory">Product Category:</label>
<select id="productCategory" name="productCategory">
  <% categories.forEach((category) => { %>
    <option><%= category.categoryName %></option>
  <% }); %>
  <!-- Add more categories as needed -->
</select><br>

  <!-- Product Price -->
  <label for="productPrice">Product Price:</label>
  <input type="number" id="productPrice" name="productPrice" min="-110" step="1" ><br>
  <span id="productPrice_error" style="color: red; margin-top: 5px;"></span>
 
  <!-- Product Stock -->
  <label for="productStock">Product Stock:</label>
  <input type="number" id="productStock" name="StockCount" min="-100" ><br>
  <span id="StockCount_error" style="color: red; margin-top: 5px;"></span>

  <label for="productOffer">Product offer:</label>
  <input type="number" id="productOffer" name="productOffer" min="-110" step="1" ><br>
  <span id="productOffer_error" style="color: red; margin-top: 5px;"></span>
 
  <label for="fileUploader">Product Images:</label>
  <input type="file" id="fileUploader" data-image-preview="#imagePreview" name="productImages" accept=".jpg,.png,.jpeg" multiple>

  <button class="addp" type="submit">Add Product</button>

</form>

<br>
<br>
<br>
<div id="imagePreview"></div>
   
 <!-- Cropper Modal -->
 <div id="cropper110Modal">
  <div id="imageCropBox">
      <div style="text-align: end;">
          <button class="cropper110-close">Close</button>
      </div>
      <section class="cropper110-page">
          <div class="cropper110-box">
              <div class="cropper110-cropping-box"></div>
          </div>
          <div>
              <button class="cropper110-crop mx-3">Crop</button>
          </div>
      </section>
  </div>
</div>





<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/2.8.0/cropper.min.js"></script>
<!-- /cropper modal/ -->

</div>


</div>

</div>
      
  </div>   

  <script> 
    const productName = document.getElementById('productName');
    const productDescription = document.getElementById('productDescription');
    const productCategory = document.getElementById('productCategory');
    const productPrice = document.getElementById('productPrice');
    const productStock = document.getElementById('productStock');
    const productImage = document.getElementById('productImage');
    const form = document.getElementById('form');
    const product_error = document.getElementById('product_error');
    const productDescriptionError = document.getElementById('productDescription_error');
    const productPriceError = document.getElementById('productPrice_error');
    const stockCountError = document.getElementById('StockCount_error');
    const productOffer = document.getElementById('productOffer'); 
    const productOfferError = document.getElementById('productOffer_error');

    form.addEventListener('submit', (e) => {
        let isValid = true;


         // Clear previous error messages
         product_error.innerHTML = "";
         productDescriptionError.innerHTML = "";
         productPriceError.innerHTML = "";
         stockCountError.innerHTML = "";
     productOfferError.innerHTML = ""; // Clear productOfferError message

    
        // Product Name Validation
        if (productName.value.trim() === '' || productName.value === null || !/^[a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*$/.test(productName.value.trim())) {
          product_error.textContent = 'Product Name is required';
            isValid = false;
        } else {
          product_error.textContent = '';
        }

      // Product Description Validation
      if (productDescription.value.trim() === '' || productDescription.value === null || !/^[a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*$/.test(productDescription.value.trim()))
 {
    productDescriptionError.textContent = 'Product Description is required';
    isValid = false;
} else {
    productDescriptionError.textContent = '';
}

        // Product Price Validation
        if (isNaN(productPrice.value) || parseFloat(productPrice.value) < 0) {
            productPriceError.textContent = 'Invalid Product Price';
            isValid = false;
        } else {
            productPriceError.textContent = '';
        }

        // Product Stock Validation
        if (isNaN(productStock.value) || parseInt(productStock.value) < 0) {
            stockCountError.textContent = 'Invalid Stock Count';
            isValid = false;
        } else {
            stockCountError.textContent = '';
        }

          // Product Offer Validation
    if (isNaN(productOffer.value) || parseInt(productOffer.value) < 0 || parseInt(productOffer.value) > 100) {
      productOfferError.textContent = 'Product Offer must be between 0 and 100';
      isValid = false;
    } else {
      productOfferError.textContent = '';
    }
        
        if (!isValid) {
            e.preventDefault();
        }
    });

    </script>



<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>





  <script> 

  
let fileInputs = document.querySelectorAll('[data-image-preview]');
let croppingBox = document.querySelector('.cropper110-cropping-box');
let cropButton = document.querySelector('.cropper110-crop');
let closeButton = document.querySelector('.cropper110-close');
let cropper = null;
let currentInput = null;
let imgNames = null;

fileInputs.forEach(fileInput => {
    fileInput.addEventListener('change', () => {
        let previewDiv = document.querySelector(fileInput.dataset.imagePreview);
        previewDiv.innerHTML = "";
        for (let each of fileInput.files) {
            let imgSrc = URL.createObjectURL(each);
            let img = document.createElement('img');
            img.src = imgSrc;
            img.dataset.fileName = each.name;
            img.dataset.input = fileInput.id;
            img.addEventListener('click', cropImage);

            // Create a delete button for each image
            let deleteBtn = document.createElement('button');
            deleteBtn.textContent = 'Delete';
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation(); // Prevent the click from propagating to the image click event
                deleteImage(img);
            });

            // Append the image and delete button to the preview div
            previewDiv.appendChild(img);
            previewDiv.appendChild(deleteBtn);
        }
    });
});

function cropImage(e) {
    document.getElementById('cropper110Modal').style.display = 'flex';
    let img = document.createElement('img');
    img.src = e.target.src;
    img.id = 'image';
    croppingBox.innerHTML = '';
    croppingBox.appendChild(img);
    cropper = new Cropper(img, {
        aspectRatio: 4 / 4,
        viewMode: 1,
        autoCropArea: 1,
    });
    imgNames = e.target.dataset.fileName;
    currentInput = e.target.dataset.input;

    if (currentInput !== 'fileUploader') {
        cropper.destroy();
        document.getElementById('cropper110Modal').style.display = 'none';
        return;
    }
}

function deleteImage(img) {
    let deleteBtn = img.nextElementSibling; // Get the next sibling (delete button)

    // Remove the image and its corresponding delete button from the DOM
    img.remove();
    if (deleteBtn && deleteBtn.tagName === 'BUTTON') {
        deleteBtn.remove(); // Remove the delete button if it exists
    }

    // Remove the file from the input's files list
    let fileName = img.dataset.fileName;
    let fileInput = document.getElementById(img.dataset.input);
    let files = Array.from(fileInput.files);
    let updatedFiles = files.filter(file => file.name !== fileName);
    fileInput.value = ''; // Clear the input value to reset it
    updatedFiles.forEach(file => fileInput.files.add(file)); // Add updated files back to input
}



cropButton.addEventListener('click', e => {
    e.preventDefault();

    if (!cropper || !cropper.getCroppedCanvas()) {
        alert('Please make a selection first!');
        return;
    }
    let imgSrc = cropper.getCroppedCanvas({
        width: 300 // input value
    }).toDataURL();
    if (imgSrc && imgNames !== null) {
        let fileUploader = document.getElementById(currentInput);
        fetch(imgSrc)
            .then(res => res.blob())
            .then(blob => {
                let file = new File([blob], `${imgNames}-${Date.now()}.png`, { type: "image/png" });
                const dt = new DataTransfer();
                for (let each of fileUploader.files) {
                    if (each.name !== imgNames) {
                        dt.items.add(each);
                    } else {
                        dt.items.add(file);
                    }
                }
                fileUploader.files = dt.files;

                // Update the preview after cropping
                let previewDiv = document.querySelector(fileUploader.dataset.imagePreview);
                previewDiv.innerHTML = "";
                let res = "";
                for (let each of fileUploader.files) {
                    let src = URL.createObjectURL(each);
                    res += `<img src="${src}" data-file-name="${each.name}" data-input="${fileUploader.id}" onclick="cropImage(event)" class="previewImages">`;
                    res += `<button onclick="deleteImage(this.previousElementSibling)">Delete</button>`; // Add delete button for each image
                }
                previewDiv.innerHTML = res;
            });
    }
    closeButton.click();
});

closeButton.addEventListener('click', () => {
    document.getElementById('cropper110Modal').style.display = 'none';
    if (cropper) {
        cropper.destroy();
    }
});

 
    </script>


    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
</body>
</html>