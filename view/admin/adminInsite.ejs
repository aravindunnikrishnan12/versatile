<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/stylesheet/admin/dashbod.css">
    <script src="https://kit.fontawesome.com/197a2eac2f.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://kit.fontawesome.com/197a2eac2f.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha384-BiVPcbB6SEt7Uizk4KthYl0IiIqK+k8TbHhZRHGp7v9GgDyDvR9CSy3Kb5ip1es5" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha384-5yS1jkY6k3OgMG0nVW1Fd//GRsD1yUGNGyCy0gGp1Hc1d1HWggvyT+L86PqFoFoC" crossorigin="anonymous">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-door-open-fill' viewBox='0 0 16 16'%3E%3Cpath d='M1.5 15a.5.5 0 0 0 0 1h13a.5.5 0 0 0 0-1H13V2.5A1.5 1.5 0 0 0 11.5 1H11V.5a.5.5 0 0 0-.57-.495l-7 1A.5.5 0 0 0 3 1.5V15zM11 2h.5a.5.5 0 0 1 .5.5V15h-1zm-2.5 8c-.276 0-.5-.448-.5-1s.224-1 .5-1 .5.448.5 1-.224 1-.5 1'/%3E%3C/svg%3E" type="image/svg+xml">
 
<style>
.filter-container{
  position: fixed;
  left:700px;
  top:100px;
border-radius: 20px;
}
#filterSelect{
  border-radius: 20px;
  box-shadow: 0 0 3px rgba(1, 2, 3, 1.1);
}
.card-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 400px; /* Adjust height as needed */
}

.card {
  height: 250px;
  width: 100%;
 width: 800px; /* Adjust max-width as needed */
  padding: 20px;
  border-radius: 15px;
  box-shadow: 0 0 5px rgba(1, 2, 3, 1.1);
}
#myPaymentMethodChart{
  position: fixed;
  left: 350px;
  top:320px
}

/* Custom styles for offcanvas */
.offcanvas-body {
    background-color: rgb(239, 236, 236);
    padding: 10px;
    max-height: 620px; /* Adjust the height as needed */
    overflow-y: auto; /* Enable vertical scrolling */
  
    scrollbar-width: none; /* Hide the scrollbar */
    -webkit-scrollbar-width: none; /* WebKit-specific - hide the scrollbar */
}

.offcanvas-body::-webkit-scrollbar {
    display: none; /* Hide the scrollbar in WebKit browsers */
}


.offcanvas-header {
  height: 74px;
  background-color: #2e322f; /* Background color for header */
  color: #fff; /* Text color for header */
}


/* Custom styles for close button in offcanvas */
.btn-close {
  color: #fff; /* Text color for the close button */
  background-color: #ffffff; /* Background color for the close button */
  border-color: #31473A; /* Border color for the close button */
}

.btn-close:hover {
  color: #fff; /* Text color for the close button on hover */
  background-color: #1F2C23; /* Background color for the close button on hover */
  border-color: #1F2C23; /* Border color for the close button on hover */
}
/* Add this CSS to your stylesheet or <style> tag in HTML */
  .top-products-list {
    list-style-type: none;
    padding: 0;
}

.top-product-item {
 border-radius: 8px;
    display: flex;
    align-items: center;
    padding: 10px;
    margin-bottom: 5px; /* Space between items */
    background-color: #ffffff; /* Light background color */
}

.product-image {
    width: 50px; /* Adjust image width as needed */
    height: 50px; /* Adjust image height as needed */
    margin-right: 10px;
}

.product-name {
    font-weight: bold;
}

.product-total-price {
    margin-left: auto; /* Push total price to the right */
}
#selectOption {
        width: 180px; /* Set the width as needed */
        padding: 8px; /* Add padding for better appearance */
        font-size: 16px; /* Adjust font size */
        border: 1px solid #ffffff; /* Add a border */
        border-radius: 5px; /* Add border radius for rounded corners */
    } 

  
    #selectOption option {
        background-color: #ffffff; /* Background color for options */
        color: #333; /* Text color for options */
    }
    

    #categoryContent {
    display: none;
    background-color: white;
    border-radius: 5px;
    padding: 10px;
}

.category-item {
    background-color: rgb(227, 239, 243);
    border-radius: 3px;
    padding: 10px; /* Increased padding for better spacing */
    margin-bottom: 10px; /* Increased margin for better spacing */
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Box shadow */
}

.category-item a {
    float: right; /* Float the icon to the right */
    margin-left: 10px; /* Add left margin to space it from text */
    color: #555; /* Icon color */
}
.category-item {
    display: flex; /* Use flexbox for layout */
    justify-content: space-between; /* Space between category text and count */
}


.count-label {
    font-weight: bold; /* Bold font for the count label */
}
/* Default styles */

/* Your existing styles here */

/* Media query for iPad */
@media only screen and (max-width: 1024px) {
  .main-nav h1 {
    font-size: 28px;
  }
  .menu {
    margin-left: 550px;
  }
}

/* Media query for mobile devices */
@media only screen and (max-width: 768px) {
  .navbar {
    height: 100px; /* Increase height for better touch interaction */
  }
  .main-nav h1 {
    font-size: 24px;
  }
  .menu {
    margin-left: 0;
    margin-top: 10px;
    justify-content: center;
  }
  .menu li {
    margin-left: 20px;
  }
  .filter-container {
    left: 20px;
  }
}

/* Media query for smaller mobile devices */
@media only screen and (max-width: 480px) {
  .navbar {
    height: 120px; /* Further increase height for smaller screens */
  }
  .main-nav h1 {
    font-size: 20px;
  }
  .menu {
    margin-left: 0;
    margin-top: 20px;
    justify-content: center;
  }
  .menu li {
    margin-left: 10px;
  }
  .filter-container {
    left: 10px;
  }
}

    @media (max-width: 1024px) {
  .top-bar {
    width: 100%; /* Make the top bar full width */
    left: 0; /* Remove left positioning */
    border-radius: 0; /* Remove border-radius for full-width layout */
  }

  .first {
    margin-left: 0; /* Remove left margin for centering */
    width: 100%; /* Make the overall-stats container full width */
  }

  .filter-container {
    left: 0; /* Adjust left positioning */
    width: 100%; /* Make the filter container full width */
    top: 180px; /* Adjust top positioning */
  }

  .chart-card {
    left: 0; /* Adjust left positioning */
    width: 100%; /* Make the chart card full width */
    top: 280px; /* Adjust top positioning */
  }

  #myPaymentMethodChart {
    left: 0; /* Adjust left positioning */
    top: 620px; /* Adjust top positioning */
  }
}

@media (max-width: 768px) {
  .top-bar {
    height: auto; /* Allow height to adjust based on content */
  }

  .first {
    height: auto; /* Allow height to adjust based on content */
    display: block; /* Change to block display for responsiveness */
    margin: 10px auto; /* Center the overall-stats container */
    width: 90%; /* Set a percentage width */
  }

  .filter-container,
  .chart-card {
    position: static; /* Remove fixed positioning */
    width: 90%; /* Set a percentage width */
    margin: 10px auto; /* Center the containers */
  }

  #myPaymentMethodChart {
    position: static; /* Remove fixed positioning */
    width: 90%; /* Set a percentage width */
    margin: 10px auto; /* Center the chart */
  }
}
.container {
    height: 500px; /* Set a fixed height for the container */
    
    border: 1px solid #ccc;
    padding: 10px;
  }

  .content {
    height: 1000px; /* Make the content taller than the container */
  }
  
/* Media query for larger screens */
@media screen and (max-width: 1256px) {
  .sidebar {
        width: 0px; /* Adjust as needed for the smaller icon size */
        padding-top: 10px; /* Adjust padding for smaller icons */
    }

    .sidebar ul {
        padding-left: 0; /* Remove left padding for smaller icons */
    }

    .sidebar li {
        margin-bottom: 10px; /* Reduced margin between list items */
    }

    .sidebar a {
        padding: 5px; /* Adjust padding for smaller icons */
        width: 40px; /* Adjust width for smaller icons */
        text-align: center; /* Center text in smaller icons */
    }
}
/* Media query for smaller screens */
@media screen and (max-width: 768px) {
    .sidebar {
        width: 60px; /* Adjust as needed for the smaller icon size */
        padding-top: 10px; /* Adjust padding for smaller icons */
    }

    .sidebar ul {
        padding-left: 0; /* Remove left padding for smaller icons */
    }

    .sidebar li {
        margin-bottom: 10px; /* Reduced margin between list items */
    }

    .sidebar a {
        padding: 5px; /* Adjust padding for smaller icons */
        width: 40px; /* Adjust width for smaller icons */
        text-align: center; /* Center text in smaller icons */
    }
}

/* For iPad Mini */
@media only screen and (min-width: 768px) and (max-width: 1124px) {
  .chart-container canvas,
  .chart-card .chart-container canvas,
  .chart-container .card-container .card canvas {
    width: 300px;
    height: 300px;
  }
}

/* For small desktops */
@media only screen and (min-width: 1025px) and (max-width: 1366px) {
  .chart-container canvas,
  .chart-card .chart-container canvas,
  .chart-container .card-container .card canvas {
    width: 400px;
    height: 400px;
  }
}

/* For phones */
@media only screen and (max-width: 767px) {
  .chart-container canvas,
  .chart-card .chart-container canvas,
  .chart-container .card-container .card canvas {
    width: 250px;
    height: 250px;
  }
}
/* Media query to hide text on screens below 768px (phones) */
@media only screen and (max-width: 767px) {
  .menu-text {
    display: none; /* Hide the text */
  }
}

</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>

  <div class="navbar">
   
    <nav class="main-nav">
        <div>
         
            <h1>Versatile</h1>
        </div>
        <div class="search-bar">
          <input type="text" placeholder="Search..." class="search-input">
          <button type="button" class="search-button"><i class="fas fa-search"></i></button>
      </div>
    
      <div  class="panel"> 
        <h3>Admin Panel</h3>
      </div>
        
    </nav>
</div>

<div class="content-container">
  <div class="sidebar">
  <div id="accordion">
      <ul>
          <li><a href="/admin/Insite" data-tag="dashboard"><i class="fas fa-tachometer-alt"></i>Dashboard</a></li>
          <li><a href="/admin/UserManage" data-tag="dashboard"><i class="fas fa-tachometer-alt"></i>user manage</a></li>
          <li><a href="/admin/category" data-tag="category"><i class="fas fa-address-book"></i>Category Details</a></li>
          <li><a href="/admin/products" data-tag="product"><i class="fas fa-clone"></i>Product Details</a></li>
          <li><a href="/admin/order" data-tag="order"><i class="fas fa-calendar"></i>Order & Payment</a></li>
          <li><a href="/admin/getsalesReport" data-tag="sales"><i class="fas fa-chart-bar"></i>Sales Report</a></li>
          <li><a href="/admin/couponmanageadmin" data-tag="coupon"><i class="fas fa-copy"></i>Coupon</a></li>
          <li><a href="/adminlogout">Logout</a></li>
      </ul>
  </div>
</div>



 
   
      <div class="overall-stats">
        <p>Overall Sales Count: <span id="sales-count"><%= salesCount %></span></p>
        <p>Overall Order Amount: <span id="order-amount"><%= orderCount %></span></p>
        <p>Overall Discount: <span id="overall-discount"><%= discountCount %></span></p>
      </div>
 
    <button class="btn btn-dark toggle-offcanvas" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">
      Best selling
  </button>
  
  <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
      <div class="offcanvas-header">
          <h5 id="offcanvasRightLabel">Best Selling</h5>
          <select id="selectOption" class="form-select" aria-label="Select Option">
            <option value="products">Products</option>
            <option value="categories">Categories</option>
        </select>
          <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body">
        
          <div id="productContent">
              <ul class="top-products-list">
                  <% groupedTopProductDetails.forEach(product => { %>
                      <li class="top-product-item">
                          <img src="<%= product.product.productImage[0] %>" alt="<%= product.product.productName %> Image" class="product-image">
                          <div>
                              <span class="product-name"><%= product.product.productName %></span>
                              <span class="product-sales-count">Sales Count: <%= product.salesCount %></span>
                              <span class="product-total-price"><%= product.totalPrice.toFixed(2) %></span>
                          </div>
                      </li>
                  <% }); %>
              </ul>
          </div>
          <div id="categoryContent">
            <% productCategories.forEach(category => { %>
                <div class="category-item">
                    <h5 class="count-label"><%= category %></h5>
                    <h5 class="count-label">Count: <span class="random-number"></span></h5>
                </div>
            <% }); %>
        </div>       
        
      </div>
  </div>


    <div class="chart-container">
      <canvas id="myPaymentMethodChart" width="400" height="400"></canvas>
    </div>
    <div class="chart-card">
      <div class="chart-container">
        <canvas id="myChart"></canvas>
      </div>
      <div class="chart-container card-container">
        <div class="card" style="background-color:white">
          <canvas id="myDailyChart"></canvas>
        </div>
      </div>
    </div>

    
    <div class="filter-container">
      <select id="filterSelect">
         <option value="yearly">Yearly</option>
         <option value="monthly">Monthly</option>
         <option value="weekly">Weekly</option> 
      </select>
    </div>
    <canvas id="myChart"></canvas>
  </div>

 
  
  

</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
      const categoryItems = document.querySelectorAll(".category-item");

      categoryItems.forEach(item => {
          const randomNumber = Math.floor(Math.random() * 28) + 10; // Generates random number between 20 and 100
          const randomNumberSpan = item.querySelector(".random-number");
          if (randomNumberSpan) {
              randomNumberSpan.textContent = randomNumber;
          }
      });
  });
</script>

<script>



</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const ctxPaymentMethod = document.getElementById('myPaymentMethodChart').getContext('2d');

  // Set data for the payment method chart
  const paymentMethodChartData = {
    labels: Object.keys(<%- JSON.stringify(paymentMethodCounts) %>),
    datasets: [{
      label: 'Payment Method',
      data: Object.values(<%- JSON.stringify(paymentMethodCounts) %>),
      backgroundColor: [
        'rgba(255, 99, 132, 0.6)', // Wallet
        'rgba(54, 162, 235, 0.6)', // CashOnDelivery
        'rgba(255, 206, 86, 0.6)', // Razorpay
        'rgba(75, 192, 192, 0.6)' // CreditCard
      ],
      borderColor: [
        'rgba(255, 99, 132, 1)', // Wallet
        'rgba(54, 162, 235, 1)', // CashOnDelivery
        'rgba(255, 206, 86, 1)', // Razorpay
        'rgba(75, 192, 192, 1)' // CreditCard
      ],
      borderWidth: 1
    }]
  };

  const myPaymentMethodChart = new Chart(ctxPaymentMethod, {
    type: 'doughnut',
    data: paymentMethodChartData,
    options: {
      maintainAspectRatio: false, // Ensure chart doesn't maintain aspect ratio
      responsive: false, // Ensure chart is not responsive
      plugins: {
        legend: {
          position: 'right', // Position legend on the right side of the chart
        },
        title: {
          display: true,
          text: 'Payment Details', // Add your desired text here
          fontSize: 28,
          padding: {
            top: 30, // Increase top padding to move title further from the chart
            bottom: 0,
            left: 0,
            right: 100
          }
          
        }
      },
      layout: {
        padding: {
          left: 0,
          right: 20,
          top: 20,
          bottom: 20
        }
      }
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
      const selectOption = document.getElementById('selectOption');
      const productContent = document.getElementById('productContent');
      const categoryContent = document.getElementById('categoryContent');

      // Add event listener for select option change
      selectOption.addEventListener('change', function () {
          const selectedOption = selectOption.value;

          // Show/hide content based on selected option
          if (selectedOption === 'products') {
              productContent.style.display = 'block';
              categoryContent.style.display = 'none';
          } else if (selectedOption === 'categories') {
              productContent.style.display = 'none';
              categoryContent.style.display = 'block';
          }
      });
  });
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>
  const ctxDaily = document.getElementById('myDailyChart').getContext('2d');
  
  // Sample dailyCounts data for testing
  const dailyCounts = {
    "2024-05-01": 10,
    "2024-05-02": 15,
    "2024-05-03": 20,
    "2024-05-04": 12,
    "2024-05-05": 18,
    "2024-05-06": 25,
    "2024-05-07": 30
  };

  // Set data for the daily order chart
  const dailyChartData = {
    labels: Object.keys(dailyCounts),
    datasets: [{
      label: 'Orders per day',
      data: Object.values(dailyCounts),
      backgroundColor: 'rgba(54, 162, 235, 0.2)', // Blue background color with transparency
      borderColor: 'rgba(54, 162, 235, 1)', // Solid blue border color
      borderWidth: 2 // Increased border width for visibility
    }]
  };

  const myDailyChart = new Chart(ctxDaily, {
    type: 'line',
    data: dailyChartData,
    options: {
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            // Configure y-axis ticks for proper display
            callback: function(value, index, values) {
              return value; // Display the value without formatting
            }
          }
        }
      },
      plugins: {
        legend: {
          display: true, // Show legend for the chart
          position: 'top', // Position legend on top of the chart
        }
      }
    }
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>




<script>
  const ctx = document.getElementById('myChart').getContext('2d');
  const filterSelect = document.getElementById('filterSelect');
  const xAxisLabels =Array.from({ length: 31 }, (_, i) => (i + 1).toString());

  let chartData = {
  labels: xAxisLabels,
  datasets: [{
    label: 'Order Count',
    data: Object.values(`<%- JSON.stringify(yearlyCounts) %>`),
    backgroundColor: 'rgba(255, 99, 132, 0.2)', // Change to desired color
    borderColor: 'rgba(255, 99, 132, 1)', // Change to desired color
    borderWidth: 1
  }]
};
const myChart = new Chart(ctx, {
  type: 'bar',
  data: chartData,
  options: {
    scales: {
      y: {
        beginAtZero: true,
        
      }
    }
  }
});

  // Update chart based on filter selection
  filterSelect.addEventListener('change', function() {
  const selectedFilter = this.value;
  let newData;

  switch (selectedFilter) {
    case 'yearly':
      // Assuming yearlyCounts has all yearly data
      const lastTwoYearsData = Object.entries(<%- JSON.stringify(yearlyCounts) %>)
        .slice(-2) // Get the last 2 years
        .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});
      newData = {
        labels: Object.keys(lastTwoYearsData),
        datasets: [{
          label: 'Order Count',
          data: Object.values(lastTwoYearsData),
          backgroundColor: 'rgba(54, 162, 235, 0.2)',
          borderColor: 'rgba(54, 162, 235, 1)',
          borderWidth: 1
        }]
      };
      break;
    case 'monthly':
      // Assuming monthlyCounts has all monthly data
      const lastTwoMonthsData = Object.entries(<%- JSON.stringify(monthlyCounts) %>)
        .slice(-2) // Get the last 2 months
        .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});
      newData = {
        labels: Object.keys(lastTwoMonthsData),
        datasets: [{
          label: 'Order Count',
          data: Object.values(lastTwoMonthsData),
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        }]
      };
      break;
    case 'weekly':
      // Assuming weeklyCounts has all weekly data
      const lastTwoWeeksData = Object.entries(<%- JSON.stringify(weeklyCounts) %>)
        .slice(-2) // Get the last 2 weeks
        .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});
      newData = {
        labels: Object.keys(lastTwoWeeksData),
        datasets: [{
          label: 'Order Count',
          data: Object.values(lastTwoWeeksData),
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      };
      break;
    default:
      newData = chartData;
      break;
  }

  myChart.data = newData;
  myChart.update();
});
</script>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"></script>
</body>
</html>